{"pageProps":{"markdown":{"content":"\n[Waku v2](https://rfc.vac.dev/spec/10/) enables secure, privacy preserving communication using a set of modular P2P protocols.\nWaku v2 also aims at protecting the user's anonymity.\nThis post is the first in a series about Waku v2 security, privacy, and anonymity.\nThe goal is to eventually have a full privacy and anonymity analysis for each of the Waku v2 protocols, as well as covering the interactions of various Waku v2 protocols.\nThis provides transparency with respect to Waku's current privacy and anonymity guarantees, and also identifies weak points that we have to address.\n\nIn this post, we first give an informal description of security, privacy and anonymity in the context of Waku v2.\nFor each definition, we summarize Waku's current guarantees regarding the respective property.\nWe also provide attacker models, an attack-based threat model, and a first anonymity analysis of [Waku v2 relay](https://rfc.vac.dev/spec/11/) within the respective models.\n\nWaku comprises many protocols that can be combined in a modular way.\nFor our privacy and anonymity analysis, we start with the relay protocol because it is at the core of Waku v2 enabling Waku's publish subscribe approach to P2P messaging.\nIn its current form, Waku relay is a minor extension of [libp2p GossipSub](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/README.md).\n\n![Figure 1: The Waku v2 relay mesh is based on the [GossipSub mesh](https://docs.libp2p.io/concepts/publish-subscribe#types-of-peering)](/img/libp2p_gossipsub_types_of_peering.png)\n\n## Informal Definitions: Security, Privacy, and Anonymity\n\nThe concepts of security, privacy, and anonymity are linked and have quite a bit of overlap.\n\n### Security\n\nOf the three, [Security](https://en.wikipedia.org/wiki/Information_security) has the clearest agreed upon definition,\nat least regarding its key concepts: *confidentiality*, *integrity*, and *availability*.\n\n* confidentiality:  data is not disclosed to unauthorized entities.\n* integrity: data is not modified by unauthorized entities.\n* availability: data is available, i.e. accessible by authorized entities.\n\nWhile these are the key concepts, the definition of information security has been extended over time including further concepts,\ne.g. [authentication](https://en.wikipedia.org/wiki/Authentication) and [non-repudiation](https://en.wikipedia.org/wiki/Non-repudiation).\nWe might cover these in future posts.\n\n### Privacy\n\nPrivacy allows users to choose which data and information\n\n* they want to share\n* and with whom they want to share it.\n\nThis includes data and information that is associated with and/or generated by users.\nProtected data also comprises metadata that might be generated without users being aware of it.\nThis means, no further information about the sender or the message is leaked.\nMetadata that is protected as part of the privacy-preserving property does not cover protecting the identities of sender and receiver.\nIdentities are protected by the [anonymity property](#anonymity).\n\nOften privacy is realized by the confidentiality property of security.\nThis neither makes privacy and security the same, nor the one a sub category of the other.\nWhile security is abstract itself (its properties can be realized in various ways), privacy lives on a more abstract level using security properties.\nPrivacy typically does not use integrity and availability.\nAn adversary who has no access to the private data, because the message has been encrypted, could still alter the message.\n\nWaku offers confidentiality via secure channels set up with the help of the [Noise Protocol Framework](https://noiseprotocol.org/).\nUsing these secure channels, message content is only disclosed to the intended receivers.\nThey also provide good metadata protection properties.\nHowever, we do not have a metadata protection analysis as of yet,\nwhich is part of our privacy/anonymity roadmap.\n\n\n### Anonymity\n\nPrivacy and anonymity are closely linked.\nBoth the identity of a user and data that allows inferring a user's identity should be part of the privacy policy.\nFor the purpose of analysis, we want to have a clearer separation between these concepts.\n\nWe define anonymity as *unlinkablity of users' identities and their shared data and/or actions*.\n\nWe subdivide anonymity into *receiver anonymity* and *sender anonymity*.\n\n#### Receiver Anonymity\n\nWe define receiver anonymity as *unlinkability of users' identities and the data they receive and/or related actions*.\nThe data transmitted via Waku relay must be a [Waku message](https://rfc.vac.dev/spec/14/), which contains a content topic field.\nBecause each message is associated with a content topic, and each receiver is interested in messages with specific content topics,\nreceiver anonymity in the context of Waku corresponds to *subscriber-topic unlinkability*.\nAn example for the \"action\" part of our receiver anonymity definition is subscribing to a specific topic.\n\nThe Waku message's content topic is not related to the libp2p pubsub topic.\nFor now, Waku uses a single libp2p pubsub topic, which means messages are propagated via a single mesh of peers.\nWith this, the receiver discloses its participation in Waku on the gossipsub layer.\nWe will leave the analysis of libp2p gossipsub to a future article within this series, and only provide a few hints and pointers here.\n\nWaku offers k-anonymity regarding content topic interest in the global adversary model.\n[K-anonymity](https://en.wikipedia.org/wiki/K-anonymity) in the context of Waku means an attacker can link receivers to content topics with a maximum certainty of $1/k$.\nThe larger $k$, the less certainty the attacker gains.\nReceivers basically hide in a pool of $k$ content topics, any subset of which could be topics they subscribed to.\nThe attacker does not know which of those the receiver actually subscribed to,\nand the receiver enjoys [plausible deniability](https://en.wikipedia.org/wiki/Plausible_deniability#Use_in_cryptography) regarding content topic subscription.\nAssuming there are $n$ Waku content topics, a receiver has $n$-anonymity with respect to association to a specific content topic.\n\nTechnically, Waku allows distributing messages over several libp2p pubsub topics.\nThis yields $k$-anonymity, assuming $k$ content topics share the same pubsub topic.\nHowever, if done wrongly, such sharding of pubsub topics can breach anonymity.\nA formal specification of anonymity-preserving topic sharding building on the concepts of [partitioned topics](https://specs.status.im/spec/10#partitioned-topic) is part of our roadmap.\n\nAlso, Waku is not directly concerned with 1:1 communication, so for this post, 1:1 communication is out of scope.\nChannels for 1:1 communication can be implemented on top of Waku relay.\nIn the future, a 1:1 communication protocol might be added to Waku.\nSimilar to topic sharding, it would maintain receiver anonymity leveraging [partitioned topics](https://specs.status.im/spec/10#partitioned-topic).\n\n#### Sender Anonymity\n\nWe define sender anonymity as *unlinkability of users' identities and the data they send and/or related actions*.\nBecause the data in the context of Waku is Waku messages, sender anonymity corresponds to *sender-message unlinkability*.\n\nIn summary, Waku offers weak sender anonymity because of [Waku's strict no sign policy](https://rfc.vac.dev/spec/11/#signature-policy),\nwhich has its origins in the [Ethereum consensus specs](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/p2p-interface.md#why-are-we-using-the-strictnosign-signature-policy).\n[17/WAKU-RLN-RELAY](https://rfc.vac.dev/spec/17/) and [18/WAKU2-SWAP](https://rfc.vac.dev/spec/18/) mitigate replay and injection attacks.\n\nWaku currently does not offer sender anonymity in stronger attacker models, as well as cannot protect against targeted attacks in weaker attacker models like the single or multi node attacker.\nWe will cover this in more detail in later sections.\n\n### Anonymity Trilemma\n\n[The Anonymity trilemma](https://freedom.cs.purdue.edu/projects/trilemma.html) states that only two out of *strong anonymity*, *low bandwidth*, and *low latency* can be guaranteed in the global on-net attacker model.\nWaku's goal, being a modular set of protocols, is to offer any combination of two out of these three properties, as well as blends.\nAn example for blending is an adjustable number of pubsub topics and peers in the respective pubsub topic mesh; this allows tuning the trade-off between anonymity and bandwidth.\n\n![Figure 2: Anonymity Trilemma: pick two. ](/img/anonymity_trilemma.svg)\n\nA fourth factor that influences [the anonymity trilemma](https://freedom.cs.purdue.edu/projects/trilemma.html) is *frequency and patterns* of messages.\nThe more messages there are, and the more randomly distributed they are, the better the anonymity protection offered by a given anonymous communication protocol.\nSo, incentivising users to use the protocol, for instance by lowering entry barriers, helps protecting the anonymity of all users.\nThe frequency/patterns factor is also related to the above described k-anonymity.\n\n### Censorship Resistance\n\nAnother security related property that Waku aims to offer is censorship resistance.\nCensorship resistance guarantees that users can participate even if an attacker tries to deny them access.\nSo, censorship resistance ties into the availability aspect of security.\nIn the context of Waku that means users should be able to send messages as well as receive all messages they are interested in,\neven if an attacker tries to prevent them from disseminating messages or tries to deny them access to messages.\n\nCurrently, Waku only guarantees censorship resistance in the weak single node attacker model.\nWhile currently employed secure channels mitigate targeted censorship, e.g. blocking specific content topics,\ngeneral censorship resistance in strong attacker models is part of our roadmap.\nAmong other options, we will investigate [Pluggable Transports](https://www.pluggabletransports.info/about/) in future articles.\n\n## Attacker Types\n\nThe following lists various attacker types with varying degrees of power.\nThe more power an attacker has, the more difficult it is to gain the respective attacker position.\n\nEach attacker type comes in a passive and an active variant.\nWhile a passive attacker can stay hidden and is not suspicious,\nthe respective active attacker has more (or at least the same) deanonymization power.\n\nWe also distinguish between internal and external attackers.\n\n### Internal\n\nWith respect to Waku relay, an internal attacker participates in the same pubsub topic as its victims.\nWithout additional measures on higher layer protocols, access to an internal position is easy to get.\n\n#### Single Node\n\nThis attacker controls a single node.\nBecause this position corresponds to normal usage of Waku relay, it is trivial to obtain.\n\n#### Multi Node\n\nThis attacker controls several nodes. We assume a smaller static number of controlled nodes.\nThe multi node position can be achieved relatively easily by setting up multiple nodes.\nBotnets might be leveraged to increase the number of available hosts.\nMulti node attackers could use [Sybil attacks](https://en.wikipedia.org/wiki/Sybil_attack) to increase the number of controlled nodes.\nA countermeasure is for nodes to only accept libp2p gossipsub graft requests from peers with different IP addresses, or even different subnets.\n\n#### Linearly Scaling Nodes\n\nThis attacker controls a number of nodes that scales linearly with the number of nodes in the network.\nThis attacker is especially interesting to investigate in the context of DHT security,\nwhich Waku uses for ambient peer discovery.\n\n### External\n\nAn external attacker can only see encrypted traffic (protected by a secure channel set up with [Noise](https://rfc.vac.dev/spec/35/)).\nBecause an internal position can be easily obtained,\nin practice external attackers would mount combined attacks that leverage both internal an external attacks.\nWe cover this more below when describing attacks.\n\n#### Local\n\nA local attacker has access to communication links in a local network segment.\nThis could be a rogue access point (with routing capability).\n\n#### AS\n\nAn AS attacker controls a single AS (autonomous system).\nA passive AS attacker can listen to traffic on arbitrary links within the AS.\nAn active AS attacker can drop, inject, and alter traffic on arbitrary links within the AS.\n\nIn practice, a malicious ISP would be considered as an AS attacker.\nA malicious ISP could also easily setup a set of nodes at specific points in the network,\ngaining internal attack power similar to a strong multi node attacker.\n\n#### Global On-Net\n\nA global on-net attacker has complete overview over the whole network.\nA passive global attacker can listen to traffic on all links,\nwhile the active global attacker basically carries the traffic: it can freely drop, inject, and alter traffic at all positions in the network.\nThis basically corresponds to the [Dolev-Yao model](https://en.wikipedia.org/wiki/Dolev%E2%80%93Yao_model).\n\nAn entity with this power would, in practice, also have the power of the internal linearly scaling nodes attacker.\n\n## Attack-based Threat Analysis\n\nThe following lists various attacks including the weakest attacker model in which the attack can be successfully performed.\nThe respective attack can be performed in all stronger attacker models as well.\n\nAn attack is considered more powerful if it can be successfully performed in a weaker attacker model.\n\nIf not stated otherwise, we look at these attacks with respect to their capability to deanonymize the message sender.\n\n### Scope\n\nIn this post, we introduce a simple tightly scoped threat model for Waku v2 Relay, which will be extended in the course of this article series.\n\nIn this first post, we will look at the relay protocol in isolation.\nEven though many threats arise from layers Waku relay is based on, and layers that in turn live on top of relay,\nwe want to first look at relay in isolation because it is at the core of Waku v2.\nAddressing and trying to solve all security issues of a complex system at once is an overwhelming task, which is why we focus on the soundness of relay first.\n\nThis also goes well with the modular design philosophy of Waku v2, as layers of varying levels of security guarantees can be built on top of relay, all of which can relay on the guarantees that Waku provides.\nInstead of looking at a multiplicative explosion of possible interactions, we look at the core in this article, and cover the most relevant combinations in future posts.\n\nFurther restricting the scope, we will look at the data field of a relay message as a black box.\nIn a second article on Waku v2 relay, we will look into the data field, which according to the [specification of Waku v2 relay](https://rfc.vac.dev/spec/11/#message-fields) must be a [Waku v2 message](https://rfc.vac.dev/spec/14/).\nWe only consider messages with version field `2`, which indicates that the payload has to be encoded using [35/WAKU2-NOISE](https://rfc.vac.dev/spec/35/).\n\n### Prerequisite: Get a Specific Position in the Network\n\nSome attacks require the attacker node(s) to be in a specific position in the network.\nIn most cases, this corresponds to trying to get into the mesh peer list for the desired pubsub topic of the victim node.\n\nIn libp2p gossipsub, and by extension Waku v2 relay, nodes can simply send a graft message for the desired topic to the victim node.\nIf the victim node still has open slots, the attacker gets the desired position.\nThis only requires the attacker to know the gossipsub multiaddress of the victim node.\n\nA linearly scaling nodes attacker can leverage DHT based discovery systems to boost the probability of malicious nodes being returned, which in turn significantly increases the probability of attacker nodes ending up in the peer lists of victim nodes.\n[Waku v2 discv5](https://vac.dev/wakuv2-apd) will employ countermeasures that mitigate the amplifying effect this attacker type can achieve.\n\n### Replay Attack\n\nIn the scope we defined above, Waku v2 is resilient against replay attacks.\nGossipSub nodes, and by extension Waku relay nodes, feature a `seen` cache, and only relay messages they have not seen before.\nFurther, replay attacks will be punished by [RLN](https://rfc.vac.dev/spec/17/) and [SWAP](https://rfc.vac.dev/spec/18/).\n\n### Neighbourhood Surveillance\n\nThis attack can be performed by a single node attacker that is connected to all peers of the victim node $v$ with respect to a specific topic mesh. \nThe attacker also has to be connected to $v$.\nIn this position, the attacker will receive messages $m_v$ sent by $v$ both on the direct path from $v$, and on indirect paths relayed by peers of $v$.\nIt will also receive messages $m_x$ that are not sent by $v$. These messages $m_x$ are relayed by both $v$ and the peers of $v$.\nMessages that are received (significantly) faster from $v$ than from any other of $v$'s peers are very likely messages that $v$ sent,\nbecause for these messages the attacker is one hop closer to the source.\n\nThe attacker can (periodically) measure latency between itself and $v$, and between itself and the peers of $v$ to get more accurate estimates for the expected timings.\nAn AS attacker (and if the topology allows, even a local attacker) could also learn the latency between $v$ and its well-behaving peers.\nAn active AS attacker could also increase the latency between $v$ and its peers to make the timing differences more prominent.\nThis, however, might lead to $v$ switching to other peers.\n\nThis attack cannot (reliably) distinguish messages $m_v$ sent by $v$ from messages $m_y$ relayed by peers of $v$ the attacker is not connected to.\nStill, there are hop-count variations that might be leveraged.\nMessages $m_v$ always have a hop-count of 1 on the path from $v$ to the attacker, while all other paths are longer.\nMessages $m_y$ might have the same hop-count on the path from $v$ as well as on other paths.\n\n### Controlled Neighbourhood\n\nIf a multi node attacker manages to control all peers of the victim node, it can trivially tell which messages originated from $v$.\n\n### Observing Messages\n\nIf Waku relay was not protected with Noise, the AS attacker could simply check for messages leaving $v$ which have not been relayed to $v$.\nThese are the messages sent by $v$.\nWaku relay protects against this attack by employing secure channels setup using Noise.\n\n### Correlation\n\nMonitoring all traffic (in an AS or globally), allows the attacker to identify traffic correlated with messages originating from $v$.\nThis (alone) does not allow an external attacker to learn which message $v$ sent, but it allows identifying the respective traffic propagating through the network.\nThe more traffic in the network, the lower the success rate of this attack.\n\nCombined with just a few nodes controlled by the attacker, the actual message associated with the correlated traffic can eventually be identified.\n\n### DoS\n\nAn active single node attacker could run a disruption attack by\n\n* (1) dropping messages that should be relayed\n* (2) flooding neighbours with bogus messages\n\nWhile (1) has a negative effect on availability, the impact is not significant.\nA linearly scaling botnet attacker, however, could significantly disrupt the network with such an attack.\n(2) is thwarted by [RLN](https://rfc.vac.dev/spec/17/).\nAlso [SWAP](https://rfc.vac.dev/spec/18/) helps mitigating DoS attacks.\n\nA local attacker can DoS Waku by dropping all Waku traffic within its controlled network segment.\nAn AS attacker can DoS Waku within its authority, while a global attacker can DoS the whole network.\nA countermeasure are censorship resistance techniques like [Pluggable Transports](https://www.pluggabletransports.info/about/).\n\n## Summary and Future Work\n\nCurrently, Waku v2 relay offers k-anonymity with respect to receiver anonymity.\nThis also includes k-anonymity towards legitimate members of the same topic.\n\nWaku v2 relay offers sender anonymity in the single node attacker model with its [strict no sign policy](https://rfc.vac.dev/spec/11/#signature-policy).\nCurrently, Waku v2 does not guarantee sender anonymity in the multi node and stronger attacker models.\nHowever, we are working on modular anonymity-preserving protocols and building blocks as part of our privacy/anonymity roadmap.\nThe goal is to allow tunable anonymity with respect to trade offs between *strong anonymity*, *low bandwidth*, and *low latency*.\nAll of these cannot be fully guaranteed as the [the anonymity trilemma](https://freedom.cs.purdue.edu/projects/trilemma.html) states.\nSome applications have specific requirements, e.g. low latency, which require a compromise on anonymity.\nAnonymity-preserving mechanisms we plan to investigate and eventually specify as pluggable anonymity protocols for Waku comprise\n\n* [Dandelion++](https://arxiv.org/abs/1805.11060) for lightweight anonymity;\n* [onion routing](https://en.wikipedia.org/wiki/Onion_routing) as a building block adding a low latency anonymization layer;\n* [a mix network](https://en.wikipedia.org/wiki/Mix_network) for providing strong anonymity (on top of onion routing) even in the strongest attacker model at the cost of higher latency.\n\nThese pluggable anonymity-preserving protocols will form a sub-set of the Waku v2 protocol set.\nAs an intermediate step, we might directly employ Tor for onion-routing, and [Nym](https://nymtech.net/) as a mix-net layer.\n\nIn future research log posts, we will cover further Waku v2 protocols and identify anonymity problems that will be added to our roadmap.\nThese protocols comprise\n\n* [13/WAKU2-STORE](https://rfc.vac.dev/spec/13/), which can violate receiver anonymity as it allows filtering by content topic.\n  A countermeasure is using the content topic exclusively for local filters.\n* [12/WAKU2-FILTER](https://rfc.vac.dev/spec/12/), which discloses nodes' interest in topics;\n* [19/WAKU2-LIGHTPUSH](https://rfc.vac.dev/spec/19/), which also discloses nodes' interest in topics and links the lightpush client as the sender of a message to the lightpush service node;\n* [21/WAKU2-FTSTORE](https://rfc.vac.dev/spec/21/), which discloses nodes' interest in specific time ranges allowing to infer information like online times.\n\nWhile these protocols are not necessary for the operation of Waku v2, and can be seen as pluggable features,\nwe aim to provide alternatives without the cost of lowering the anonymity level.\n\n## References\n\n* [10/WAKU2](https://rfc.vac.dev/spec/10/)\n* [11/WAKU2-RELAY](https://rfc.vac.dev/spec/11/)\n* [libp2p GossipSub](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/README.md)\n* [Security](https://en.wikipedia.org/wiki/Information_security)\n* [Authentication](https://en.wikipedia.org/wiki/Authentication)\n* [Non-repudiation](https://en.wikipedia.org/wiki/Non-repudiation)\n* [Noise Protocol Framework](https://noiseprotocol.org/)\n* [plausible deniability](https://en.wikipedia.org/wiki/Plausible_deniability#Use_in_cryptography)\n* [Waku v2 message](https://rfc.vac.dev/spec/14/)\n* [partitioned topics](https://specs.status.im/spec/10#partitioned-topic)\n* [Sybil attack](https://en.wikipedia.org/wiki/Sybil_attack)\n* [Dolev-Yao model](https://en.wikipedia.org/wiki/Dolev%E2%80%93Yao_model)\n* [35/WAKU2-NOISE](https://rfc.vac.dev/spec/35/)\n* [33/WAKU2-DISCV5](https://vac.dev/wakuv2-apd)\n* [strict no sign policy](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/p2p-interface.md#why-are-we-using-the-strictnosign-signature-policy)\n* [Waku v2 strict no sign policy](https://rfc.vac.dev/spec/11/#signature-policy)\n* [17/WAKU-RLN-RELAY](https://rfc.vac.dev/spec/17/)\n* [anonymity trilemma](https://freedom.cs.purdue.edu/projects/trilemma.html)\n* [18/WAKU2-SWAP](https://rfc.vac.dev/spec/18/)\n* [Pluggable Transports](https://www.pluggabletransports.info/about/)\n* [Nym](https://nymtech.net/)\n* [Dandelion++](https://arxiv.org/abs/1805.11060)\n* [13/WAKU2-STORE](https://rfc.vac.dev/spec/13/)\n* [12/WAKU2-FILTER](https://rfc.vac.dev/spec/12/)\n* [19/WAKU2-LIGHTPUSH](https://rfc.vac.dev/spec/19/)\n* [21/WAKU2-FTSTORE](https://rfc.vac.dev/spec/21/)\n\n\n","metadata":{"layout":"post","name":"Waku Privacy and Anonymity Analysis Part I: Definitions and Waku Relay","title":"Waku Privacy and Anonymity Analysis Part I: Definitions and Waku Relay","date":"2022-07-22T10:00:00.000Z","author":"kaiserd","published":true,"permalink":"/wakuv2-relay-anon","categories":"research","summary":"Introducing a basic threat model and privacy/anonymity analysis for the Waku v2 relay protocol.","image":"/img/anonymity_trilemma.svg","discuss":"https://forum.vac.dev/t/discussion-waku-privacy-and-anonymity-analysis/149","_includes":["math"]},"toc":[{"content":"Informal Definitions: Security, Privacy, and Anonymity","slug":"informal-definitions-security-privacy-and-anonymity","lvl":2,"i":0,"seen":0},{"content":"Security","slug":"security","lvl":3,"i":1,"seen":0},{"content":"Privacy","slug":"privacy","lvl":3,"i":2,"seen":0},{"content":"Anonymity","slug":"anonymity","lvl":3,"i":3,"seen":0},{"content":"Receiver Anonymity","slug":"receiver-anonymity","lvl":4,"i":4,"seen":0},{"content":"Sender Anonymity","slug":"sender-anonymity","lvl":4,"i":5,"seen":0},{"content":"Anonymity Trilemma","slug":"anonymity-trilemma","lvl":3,"i":6,"seen":0},{"content":"Censorship Resistance","slug":"censorship-resistance","lvl":3,"i":7,"seen":0},{"content":"Attacker Types","slug":"attacker-types","lvl":2,"i":8,"seen":0},{"content":"Internal","slug":"internal","lvl":3,"i":9,"seen":0},{"content":"Single Node","slug":"single-node","lvl":4,"i":10,"seen":0},{"content":"Multi Node","slug":"multi-node","lvl":4,"i":11,"seen":0},{"content":"Linearly Scaling Nodes","slug":"linearly-scaling-nodes","lvl":4,"i":12,"seen":0},{"content":"External","slug":"external","lvl":3,"i":13,"seen":0},{"content":"Local","slug":"local","lvl":4,"i":14,"seen":0},{"content":"AS","slug":"as","lvl":4,"i":15,"seen":0},{"content":"Global On-Net","slug":"global-on-net","lvl":4,"i":16,"seen":0},{"content":"Attack-based Threat Analysis","slug":"attack-based-threat-analysis","lvl":2,"i":17,"seen":0},{"content":"Scope","slug":"scope","lvl":3,"i":18,"seen":0},{"content":"Prerequisite: Get a Specific Position in the Network","slug":"prerequisite-get-a-specific-position-in-the-network","lvl":3,"i":19,"seen":0},{"content":"Replay Attack","slug":"replay-attack","lvl":3,"i":20,"seen":0},{"content":"Neighbourhood Surveillance","slug":"neighbourhood-surveillance","lvl":3,"i":21,"seen":0},{"content":"Controlled Neighbourhood","slug":"controlled-neighbourhood","lvl":3,"i":22,"seen":0},{"content":"Observing Messages","slug":"observing-messages","lvl":3,"i":23,"seen":0},{"content":"Correlation","slug":"correlation","lvl":3,"i":24,"seen":0},{"content":"DoS","slug":"do-s","lvl":3,"i":25,"seen":0},{"content":"Summary and Future Work","slug":"summary-and-future-work","lvl":2,"i":26,"seen":0},{"content":"References","slug":"references","lvl":2,"i":27,"seen":0}]},"navProps":{"metadata":{"published":true,"title":"Waku Privacy and Anonymity Analysis Part I: Definitions and Waku Relay","layout":"post","name":"Waku Privacy and Anonymity Analysis Part I: Definitions and Waku Relay","date":"2022-07-22T10:00:00.000Z","author":"kaiserd","permalink":"/wakuv2-relay-anon","categories":"research","summary":"Introducing a basic threat model and privacy/anonymity analysis for the Waku v2 relay protocol.","image":"img/anonymity_trilemma.svg","discuss":"https://forum.vac.dev/t/discussion-waku-privacy-and-anonymity-analysis/149","_includes":["math"]},"navOrder":1658484000,"localPath":"research/2022-07-22-relay-anonymity.md","path":["wakuv2-relay-anon"],"children":[],"isDir":false},"routeParams":{"path":["wakuv2-relay-anon"]}},"__N_SSG":true}