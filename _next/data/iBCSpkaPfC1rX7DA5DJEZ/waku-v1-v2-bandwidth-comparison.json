{"pageProps":{"markdown":{"content":"\n## Background\n\nThe [original plan](https://vac.dev/waku-v2-plan) for Waku v2 suggested theoretical improvements in resource usage over Waku v1,\nmainly as a result of the improved amplification factors provided by GossipSub.\nIn its turn, [Waku v1 proposed improvements](https://vac.dev/fixing-whisper-with-waku) over its predecessor, Whisper.\n\nGiven that Waku v2 is aimed at resource restricted environments,\nwe are specifically interested in its scalability and resource usage characteristics.\nHowever, the theoretical performance improvements of Waku v2 over Waku v1,\nhas never been properly benchmarked and tested.\n\nAlthough we're working towards a full performance evaluation of Waku v2,\nthis would require significant planning and resources,\nif it were to simulate \"real world\" conditions faithfully and measure bandwidth and resource usage across different network connections,\nrobustness against attacks/losses, message latencies, etc.\n(There already exists a fairly comprehensive [evaluation of GossipSub v1.1](https://research.protocol.ai/publications/gossipsub-v1.1-evaluation-report/vyzovitis2020.pdf),\non which [`11/WAKU2-RELAY`](https://rfc.vac.dev/spec/11/) is based.)\n\nAs a starting point,\nthis post contains a limited and local comparison of the _bandwidth_ profile (only) between Waku v1 and Waku v2.\nIt reuses and adapts existing network simulations for [Waku v1](https://github.com/status-im/nim-waku/blob/master/waku/v1/node/quicksim.nim) and [Waku v2](https://github.com/status-im/nim-waku/blob/master/waku/v2/node/quicksim2.nim)\nand compares bandwidth usage for similar message propagation scenarios.\n\n## Theoretical improvements in Waku v2\n\nMessages are propagated in Waku v1 using [flood routing](https://en.wikipedia.org/wiki/Flooding_(computer_networking)).\nThis means that every peer will forward every new incoming message to all its connected peers (except the one it received the message from).\nThis necessarily leads to unnecessary duplication (termed _amplification factor_),\nwasting bandwidth and resources.\nWhat's more, we expect this effect to worsen the larger the network becomes,\nas each _connection_ will receive a copy of each message,\nrather than a single copy per peer.\n\nMessage routing in Waku v2 follows the `libp2p` _GossipSub_ protocol,\nwhich lowers amplification factors by only sending full message contents to a subset of connected peers.\nAs a Waku v2 network grows, each peer will limit its number of full-message (\"mesh\") peerings -\n`libp2p` suggests a maximum of `12` such connections per peer.\nThis allows much better scalability than a flood-routed network.\nFrom time to time, a Waku v2 peer will send metadata about the messages it has seen to other peers (\"gossip\" peers).\n\nSee [this explainer](https://hackmd.io/@vac/main/%2FYYlZYBCURFyO_ZG1EiteWg#11WAKU2-RELAY-gossipsub) for a more detailed discussion.\n\n## Methodology\n\nThe results below contain only some scenarios that provide an interesting contrast between Waku v1 and Waku v2.\nFor example, [star network topologies](https://en.wikipedia.org/wiki/Star_network) do not show a substantial difference between Waku v1 and Waku v2.\nThis is because each peer relies on a single connection to the central node for every message,\nwhich barely requires any routing:\neach connection receives a copy of every message for both Waku v1 and Waku v2.\nHybrid topologies similarly show only a difference between Waku v1 and Waku v2 for network segments with [mesh-like connections](https://en.wikipedia.org/wiki/Mesh_networking),\nwhere routing decisions need to be made.\n\nFor this reason, the following approach applies to all iterations:\n1. Simulations are run **locally**.\nThis limits the size of possible scenarios due to local resource constraints,\nbut is a way to quickly get an approximate comparison.\n2. Nodes are treated as a **blackbox** for which we only measure bandwidth,\nusing an external bandwidth monitoring tool.\nIn other words, we do not consider differences in the size of the envelope (for v1) or the message (for v2).\n3. Messages are published at a rate of **50 new messages per second** to each network,\nexcept where explicitly stated otherwise.\n4. Each message propagated in the network carries **8 bytes** of random payload, which is **encrypted**.\nThe same symmetric key cryptographic algorithm (with the same keys) are used in both Waku v1 and v2.\n5. Traffic in each network is **generated from 10 nodes** (randomly-selected) and published in a round-robin fashion to **10 topics** (content topics for Waku v2).\nIn practice, we found no significant difference in _average_ bandwidth usage when tweaking these two parameters (the number of traffic generating nodes and the number of topics).\n6. Peers are connected in a decentralized **full mesh topology**,\ni.e. each peer is connected to every other peer in the network.\nWaku v1 is expected to flood all messages across all existing connections.\nWaku v2 gossipsub will GRAFT some of these connections for full-message peerings,\nwith the rest being gossip-only peerings.\n7. After running each iteration, we **verify that messages propagated to all peers** (comparing the number of published messages to the metrics logged by each peer).\n\nFor Waku v1, nodes are configured as \"full\" nodes (i.e. with full bloom filter),\nwhile Waku v2 nodes are `relay` nodes, all subscribing and publishing to the same PubSub topic.\n\n## Network size comparison\n\n### Iteration 1: 10 nodes\n\nLet's start with a small network of 10 nodes only and see how Waku v1 bandwidth usage compares to that of Waku v2.\nAt this small scale we don't expect to see improved bandwidth usage in Waku v2 over Waku v1,\nsince all connections, for both Waku v1 and Waku v2, will be full-message connections.\nThe number of connections is low enough that Waku v2 nodes will likely GRAFT all connections to full-message peerings,\nessentially flooding every message on every connection in a similar fashion to Waku v1.\nIf our expectations are confirmed, it helps validate our methodology,\nshowing that it gives more or less equivalent results between Waku v1 and Waku v2 networks.\n\n![](//img/waku1-vs-waku2/waku1-vs-waku2-10-nodes.png)\n\nSure enough, the figure shows that in this small-scale setup,\nWaku v1 actually has a lower per-peer bandwidth usage than Waku v2.\nOne reason for this may be the larger overall proportion of control messages in a gossipsub-routed network such as Waku v2.\nThese play a larger role when the total network traffic is comparatively low, as in this iteration.\nAlso note that the average bandwidth remains more or less constant as long as the rate of published messages remains stable.\n\n### Iteration 2: 30 nodes\n\nNow, let's run the same scenario for a larger network of highly-connected nodes, this time consisting of 30 nodes.\nAt this point, the Waku v2 nodes will start pruning some connections to limit the number of full-message peerings (to a maximum of `12`),\nwhile the Waku v1 nodes will continue flooding messages to all connected peers.\nWe therefore expect to see a somewhat improved bandwidth usage in Waku v2 over Waku v1.\n\n![](//img/waku1-vs-waku2/waku1-vs-waku2-30-nodes.png)\n\nBandwidth usage in Waku v2 has increased only slightly from the smaller network of 10 nodes (hovering between 2000 and 3000 kbps).\nThis is because there are only a few more full-message peerings than before.\nCompare this to the much higher increase in bandwidth usage for Waku v1, which now requires more than 4000 kbps on average.\n\n\n### Iteration 3: 50 nodes\n\nFor an even larger network of 50 highly connected nodes,\nthe divergence between Waku v1 and Waku v2 is even larger.\nThe following figure shows comparative average bandwidth usage for a throughput of 50 messages per second.\n\n![](//img/waku1-vs-waku2/waku1-vs-waku2-50-nodes.png)\n\nAverage bandwidth usage (for the same message rate) has remained roughly the same for Waku v2 as it was for 30 nodes,\nindicating that the number of full-message peerings per node has not increased.\n\n### Iteration 4: 85 nodes\n\nWe already see a clear trend in the bandwidth comparisons above,\nso let's confirm by running the test once more for a network of 85 nodes.\nDue to local resource constraints, the effective throughput for Waku v1 falls to below 50 messages per second,\nso the v1 results below have been normalized and are therefore approximate.\nThe local Waku v2 simulation maintains the message throughput rate without any problems.\n\n![](//img/waku1-vs-waku2/waku1-vs-waku2-85-nodes.png)\n\n### Iteration 5: 150 nodes\n\nFinally, we simulate message propagation in a network of 150 nodes.\nDue to local resource constraints, we run this simulation at a lower rate -\n35 messages per second -\nand for a shorter amount of time. \n\n![](//img/waku1-vs-waku2/waku1-vs-waku2-150-nodes.png)\n\nNotice how the Waku v1 bandwidth usage is now more than 10 times worse than that of Waku v2.\nThis is to be expected, as each Waku v1 node will try to flood each new message to 149 other peers,\nwhile the Waku v2 nodes limit their full-message peerings to no more than 12.\n\n### Discussion\n\nLet's summarize average bandwidth growth against network growth for a constant message propagation rate.\nSince we are particularly interested in how Waku v1 compares to Waku v2 in terms of bandwidth usage,\nthe results are normalised to the Waku v2 average bandwidth usage for each network size.\n\n![](//img/waku1-vs-waku2/waku1-vs-waku2-overall-network-size.png)\n\nExtrapolation is a dangerous game,\nbut it's safe to deduce that the divergence will only grow for even larger network topologies.\nAlthough control signalling contributes more towards overall bandwidth for Waku v2 networks,\nthis effect becomes less noticeable for larger networks.\nFor network segments with more than ~18 densely connected nodes,\nthe advantage of using Waku v2 above Waku v1 becomes clear.\n\n## Network traffic comparison\n\nThe analysis above controls the average message rate while network size grows.\nIn reality, however, active users (and therefore message rates) are likely to grow in conjunction with the network.\nThis will have an effect on bandwidth for both Waku v1 and Waku v2, though not in equal measure.\nConsider the impact of an increasing rate of messages in a network of constant size:\n\n![](//img/waku1-vs-waku2/waku1-vs-waku2-overall-message-rate.png)\n\nThe _rate_ of increase in bandwidth for Waku v2 is slower than that for Waku v1 for a corresponding increase in message propagation rate.\nIn fact, for a network of 30 densely-connected nodes,\nif the message propagation rate increases by 1 per second,\nWaku v1 requires an increased average bandwidth of almost 70kbps at each node.\nA similar traffic increase in Waku v2 requires on average 40kbps more bandwidth per peer, just over half that of Waku v1.\n\n## Conclusions\n\n- **Waku v2 scales significantly better than Waku v1 in terms of average bandwidth usage**,\nespecially for densely connected networks.\n- E.g. for a network consisting of **150** or more densely connected nodes,\nWaku v2 provides more than **10x** better average bandwidth usage rates than Waku v1.\n- As the network continues to scale, both in absolute terms (number of nodes) and in network traffic (message rates) the disparity between Waku v2 and Waku v1 becomes even larger.\n\n## Future work\n\nNow that we've confirmed that Waku v2's bandwidth improvements over its predecessor matches theory,\nwe can proceed to a more in-depth characterisation of Waku v2's resource usage.\nSome questions that we want to answer include:\n- What proportion of Waku v2's bandwidth usage is used to propagate _payload_ versus bandwidth spent on _control_ messaging to maintain the mesh?\n- To what extent is message latency (time until a message is delivered to its destination) affected by network size and message rate?\n- How _reliable_ is message delivery in Waku v2 for different network sizes and message rates?\n- What are the resource usage profiles of other Waku v2 protocols (e.g.[`12/WAKU2-FILTER`](https://rfc.vac.dev/spec/12/) and [`19/WAKU2-LIGHTPUSH`](https://rfc.vac.dev/spec/19/))?\n\nOur aim is to get ever closer to a \"real world\" understanding of Waku v2's performance characteristics,\nidentify and fix vulnerabilities\nand continually improve the efficiency of our suite of protocols.\n\n## References\n\n- [Evaluation of GossipSub v1.1](https://research.protocol.ai/publications/gossipsub-v1.1-evaluation-report/vyzovitis2020.pdf)\n- [Fixing Whisper with Waku](https://vac.dev/fixing-whisper-with-waku)\n- [GossipSub vs flood routing](https://hackmd.io/@vac/main/%2FYYlZYBCURFyO_ZG1EiteWg#11WAKU2-RELAY-gossipsub)\n- [Network topologies: star](https://www.techopedia.com/definition/13335/star-topology#:~:text=Star%20topology%20is%20a%20network,known%20as%20a%20star%20network.)\n- [Network topologies: mesh](https://en.wikipedia.org/wiki/Mesh_networking)\n- [Waku v2 original plan](https://vac.dev/waku-v2-plan)","metadata":{"layout":"post","name":"Waku v1 vs Waku v2: Bandwidth Comparison","title":"Waku v1 vs Waku v2: Bandwidth Comparison","date":"2021-11-03T10:00:00.000Z","author":"hanno","published":true,"permalink":"/waku-v1-v2-bandwidth-comparison","categories":"research","summary":"A local comparison of bandwidth profiles showing significantly improved scalability in Waku v2 over Waku v1.","image":"/img/waku1-vs-waku2/waku1-vs-waku2-overall-network-size.png","discuss":"https://forum.vac.dev/t/discussion-waku-v1-vs-waku-v2-bandwidth-comparison/110"},"toc":[{"content":"Background","slug":"background","lvl":2,"i":0,"seen":0},{"content":"Theoretical improvements in Waku v2","slug":"theoretical-improvements-in-waku-v2","lvl":2,"i":1,"seen":0},{"content":"Methodology","slug":"methodology","lvl":2,"i":2,"seen":0},{"content":"Network size comparison","slug":"network-size-comparison","lvl":2,"i":3,"seen":0},{"content":"Iteration 1: 10 nodes","slug":"iteration-1-10-nodes","lvl":3,"i":4,"seen":0},{"content":"Iteration 2: 30 nodes","slug":"iteration-2-30-nodes","lvl":3,"i":5,"seen":0},{"content":"Iteration 3: 50 nodes","slug":"iteration-3-50-nodes","lvl":3,"i":6,"seen":0},{"content":"Iteration 4: 85 nodes","slug":"iteration-4-85-nodes","lvl":3,"i":7,"seen":0},{"content":"Iteration 5: 150 nodes","slug":"iteration-5-150-nodes","lvl":3,"i":8,"seen":0},{"content":"Discussion","slug":"discussion","lvl":3,"i":9,"seen":0},{"content":"Network traffic comparison","slug":"network-traffic-comparison","lvl":2,"i":10,"seen":0},{"content":"Conclusions","slug":"conclusions","lvl":2,"i":11,"seen":0},{"content":"Future work","slug":"future-work","lvl":2,"i":12,"seen":0},{"content":"References","slug":"references","lvl":2,"i":13,"seen":0}]},"navProps":{"metadata":{"published":true,"title":"Waku v1 vs Waku v2: Bandwidth Comparison","layout":"post","name":"Waku v1 vs Waku v2: Bandwidth Comparison","date":"2021-11-03T10:00:00.000Z","author":"hanno","permalink":"/waku-v1-v2-bandwidth-comparison","categories":"research","summary":"A local comparison of bandwidth profiles showing significantly improved scalability in Waku v2 over Waku v1.","image":"img/waku1-vs-waku2/waku1-vs-waku2-overall-network-size.png","discuss":"https://forum.vac.dev/t/discussion-waku-v1-vs-waku-v2-bandwidth-comparison/110"},"navOrder":1635933600,"localPath":"research/2021-10-25-waku-v1-vs-waku-v2.md","path":["waku-v1-v2-bandwidth-comparison"],"children":[],"isDir":false},"routeParams":{"path":["waku-v1-v2-bandwidth-comparison"]}},"__N_SSG":true}