{"pageProps":{"markdown":{"content":"# Introduction\nIn this post we will provide an overview of how [Waku v2](https://rfc.vac.dev/spec/10/) users can adopt [Noise handshakes](http://www.noiseprotocol.org/noise.html) to agree on cryptographic keys used to securely encrypt messages.\n\nThis process belongs to the class of _key-exchange_ mechanisms, consisting of all those protocols that, with different levels of complexity and security guarantees, allow two parties to publicly agree on a secret without letting anyone else know what this secret is.\n\nBut why do we need key-exchange mechanisms in the first place? \n\nWith the advent of [public-key cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), it become possible to decouple encryption from decryption through use of two distinct cryptographic keys: one _public_, used to encrypt information and that can be made available to anyone, and one _private_ (kept secret), which enables decryption of messages encrypted with its corresponding public key. The same does not happen in the case of [symmetric encryption schemes](https://en.wikipedia.org/wiki/Symmetric-key_algorithm) where, instead, the same key is used for both encryption and decryption operations and hence cannot be publicly revealed as for public keys.\n\n\nIn order to address specific application needs, many different public, symmetric and hybrid cryptographic schemes were designed: [Waku v1](https://rfc.vac.dev/spec/6/) and [Waku v2](https://rfc.vac.dev/spec/10/), which inherits part of their design from the Ethereum messaging protocol [Whisper](https://ethereum.org/en/developers/docs/networking-layer/#whisper), provide [support](https://rfc.vac.dev/spec/26/) to both public-key primitives ([`ECIES`](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme), [`ECDSA`](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm)) and symmetric primitives ([`AES-256-GCM`](https://en.wikipedia.org/wiki/Galois/Counter_Mode), [`KECCAK-256`](https://en.wikipedia.org/wiki/SHA-3)), used to sign, hash, encrypt and decrypt exchanged messages. \n\nIn principle, when communications employ public-key based encryption schemes (`ECIES`, in the case of Waku), there is no need for a key-agreement among parties: messages can be directly encrypted using the recipient's public-key before being sent over the network. However, public-key encryption and decryption primitives are usually very inefficient in processing large amount of data, and this may constitute a bottleneck for many of today's applications. Symmetric encryption schemes such as `AES-256-GCM`, on the other hand, are much more efficient, but the encryption/decryption key needs to be shared among users beforehand any encrypted messages is exchanged. \n\nTo counter the downsides given by each of these two approaches while taking advantage of their strengths, hybrid constructions were designed. In these, public-key primitives are employed to securely agree on a secret key which, in turn, is used with a symmetric cipher for encrypting messages. In other words, such constructions specify a (public-key based) key-agreement mechanism!\n\nWaku, up to [payload version 1](https://rfc.vac.dev/spec/14/#payload-encryption), does not implement nor recommend any protocol for exchanging symmetric ciphers' keys, leaving such task to the application layer. It is important to note that the kind of key-agreement employed has a direct impact on the security properties that can be granted on later encrypted messages, while security requirements usually depend on the specific application for which encryption is needed in the first place.\n\nIn this regard, [Status](https://status.im), which  builds on top of Waku, [implements](https://specs.status.im/spec/5) a custom version of the [X3DH](https://signal.org/docs/specifications/x3dh/) key-agreement protocol, in order to allow users to instantiate end-to-end encrypted communication channels. However, although such a solution is optimal when applied to (distributed) E2E encrypted chats, it is not flexible enough to fit or simplify the variety of applications Waku aims to address.\nHence, proposing and implementing one or few key-agreements which provide certain (presumably _strong_) security guarantees, would inevitably degrade performances of all those applications for which, given their security requirements, more tailored and efficient key-exchange mechanisms can be employed.\n\n\nGuided by different examples, in the following sections we will overview Noise, a protocol framework we are [currently integrating](https://rfc.vac.dev/spec/35/) in Waku, for building secure key-agreements between two parties. One of the great advantage of using Noise is that it is possible to add support to new key-exchanges by just specifying users' actions from a predefined list, requiring none to minimal modifications to existing implementations. Furthermore, Noise provides a framework to systematically analyze protocols' security properties and the corresponding attacker threat models. This allows not only to easily design new key-agreements eventually optimized for specific applications we want to address, but also to easily analyze or even [formally verify](https://noiseexplorer.com/) any of such custom protocol!\n \nWe believe that with its enormous flexibility and features, Noise represents a perfect candidate for bringing key-exchange mechanisms in Waku.\n\n## The Diffie-Hellman Key-exchange\n\nThe formalization of modern public-key cryptography started with the pioneering work of Whitefield Diffie and Martin Hellman, who detailed one of the earliest known key-agreement protocols: the famous [Diffie-Hellman Key-Exchange](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange).\n\nDiffie-Hellman (DH) key-exchange is largely used today and represents the main cryptographic building block on which Noise handshakes' security is based.\n\nIn turn, the security of DH is based on a mathematical problem called [discrete logarithm](https://en.wikipedia.org/wiki/Discrete_logarithm) which is believed to be hard when the agreement is practically instantiated using certain [elliptic curves](https://en.wikipedia.org/wiki/Elliptic_curve) $E$ defined over finite fields $\\mathbb{F}_p$.\n\nInformally, a DH exchange between Alice and Bob proceeds as follows:\n- Alice picks a secret scalar $s_A\\in\\mathbb{F}_p$ and computes, using the underlying [curve's arithmetic](https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication), the point $P_A = s_A\\cdot P\\in E(\\mathbb{F}_p)$ for a certain pre-agreed public generator $P$ of the elliptic curve $E(\\mathbb{F}_p)$. She then sends $P_A$ to Bob.\n- Similarly, Bob picks a secret scalar $s_B\\in\\mathbb{F}_p$, computes $P_B = s_B\\cdot P\\in E(\\mathbb{F}_p)$ and sends $P_B$ to Alice.\n- By commutativity of scalar multiplication, both Alice and Bob can now compute the point $P_{AB} = s_As_B\\cdot P$, using the elliptic curve point received from the other party and their secret scalar.\n\n\nThe assumed hardness of computing discrete logarithms in the elliptic curve, ensures that it is not possible to compute $s_A$ or $s_B$ from $P_A$ and $P_B$, respectively. Another security assumption (named [Computational Diffie-Hellman assumption](https://en.wikipedia.org/wiki/Computational_Diffie%E2%80%93Hellman_assumption)) ensures that it is not possible to compute $P_{AB}$ from $P$, $P_A$ and $P_B$. Hence the point $P_{AB}$ shared by Alice and Bob at the end of the above protocol cannot be efficiently computed by an attacker intercepting $P_A$ and $P_B$, and can then be used to generate a secret to be later employed, for example, as a symmetric encryption key.\n\nOn a side note, this protocol shows the interplay between two components typical to public-key based schemes: the scalars $s_A$ and $s_B$ can be seen as _private keys_ associated to the _public keys_ $P_A$ and $P_B$, respectively, which allow Alice and Bob only to compute the shared secret point $P_{AB}$.\n\n## Ephemeral and Static Public Keys\n\nAlthough we assumed that it is practically impossible for an attacker to compute the randomly picked secret scalar from the corresponding public elliptic curve point, it may happen that such scalar gets compromised or can be guessed due to a faulty employed random number generator. In such cases, an attacker will be able to recover the final shared secret and all encryption keys eventually derived from that, with clear catastrophic consequences for the privacy of exchanged messages.\n\nTo mitigate such issues, multiple DH operations can be combined using two different types of exchanged elliptic curve points or, better, _public keys_: _ephemeral keys_, that is random keys used only once in a DH operation, and long-term _static keys_, used mainly for authentication purposes since employed multiple times.\n\nJust to provide an example, let us suppose Alice and Bob perform the following custom DH-based key-exchange protocol:\n- Alice generates an ephemeral key $E_A=e_A\\cdot P$ by picking a random scalar $e_A$ and sends $E_A$ to Bob;\n- Similarly, Bob generates an ephemeral key $E_B=e_B\\cdot P$ and sends $E_B$ to Alice;\n- Alice and Bob computes $E_{AB} = e_Ae_B \\cdot P$ and from it derive a secret encryption key $k$.\n- Bob sends to Alice his static key $S_B = s_B\\cdot P$ encrypted with $k$.\n- Alice encrypts with $k$ her static key $S_A = s_A\\cdot P$ and sends it to Bob.\n- Alice and Bob decrypt the received static keys, compute the secret $S_{AB} = s_As_B \\cdot P$ and use it together with $E_{AB}$ to derive a new encryption key $\\tilde{k}$ to be later used with a symmetric cipher.\n\nIn this protocol, if Alice's and/or Bob's static keys get compromised, it would not possible to derive the final secret key $\\tilde{k}$, since at least one ephemeral key among $E_A$ and $E_B$ has to be compromised too in order to recover the secret $E_{AB}$. Furthermore, since Alice's and Bob's long-term static keys are encrypted, an attacker intercepting exchanged (encrypted) public keys will not be able to link such communication to Alice or Bob, unless one of the ephemeral key is compromised (and, even in such case, none of the messages encrypted under the key $\\tilde{k}$ can be decrypted).\n\n# The Noise Protocol Framework\n\nIn previous section we gave a small intuition on how multiple DH operations over ephemeral and static users' public keys can be combined to create different key-exchange protocols. \n\nThe [Noise Protocol Framework](http://www.noiseprotocol.org/noise.html), defines various rules for building custom key-exchange protocols while allowing easy analysis of the security properties and threat models provided given the type and order of the DH operations employed.\n\nIn Noise terminology, a key-agreement or _Noise protocol_ consists of one or more _Noise handshakes_. During a Noise handshake, Alice and Bob exchange multiple (handshake) messages containing their ephemeral keys and/or static keys. These public keys are then used to perform a handshake-dependent sequence of Diffie-Hellman operations, whose results are all hashed into a shared secret key. Similarly as we have seen above, after a handshake is complete, each party will use the derived secret key to send and receive [authenticated encrypted data](https://en.wikipedia.org/wiki/Authenticated_encryption) by employing a symmetric cipher.\n\nDepending on the _handshake pattern_ adopted, different security guarantees can be provided on messages encrypted using a handshake-derived key.\n\nThe Noise handshakes we support in Waku all provide the following security properties:\n\n- **Confidentiality**: the adversary should not be able to learn what data is being sent between Alice and Bob.\n- **Strong forward secrecy**: an active adversary cannot decrypt messages nor infer any information on the employed encryption key, even in the case he has access to Alice's and Bob's long-term private keys (during or after their communication).\n- **Authenticity**: the adversary should not be able to cause either Alice or Bob to accept messages coming from a party different than their original senders.\n- **Integrity**: the adversary should not be able to cause Alice or Bob to accept data that has been tampered with.\n- **Identity-hiding**: once a secure communication channel is established, a passive adversary should not be able to link exchanged encrypted messages to their corresponding sender and recipient by knowing their long-term static keys.\n\nWe refer to [Noise specification](http://www.noiseprotocol.org/noise.html) for more formal security definitions and precise threat models relative to Waku [supported Noise Handshake patterns](#Supported-Noise-Handshakes-in-Waku).\n\n## Message patterns\n\nNoise handshakes involving DH operations over ephemeral and static keys can be succinctly sketched using the following set of _handshake message tokens_: `e`,`s`,`ee`,`se`,`es`,`ss`.\n\nTokens employing single letters denote (the type of) users' public keys: `e` refers to randomly generated ephemeral key(s), while `s` indicates the users' long-term static key(s).\n\nTwo letters tokens, instead, denotes DH operations over the two users' public keys the token refers to, given that the left token letter refers to the handshake _initiator's_ public key, while the right token letter indicates the used _responder's_ public key. Thus, if Alice started a handshake with Bob, the `es` token will shortly represent a DH operation among Alice's ephemeral key `e` and Bob's static key `s`.\n\nSince, in order to perform any DH operations users need to share (or pre-share) the corresponding public keys, Noise compactly represents messages' exchanges using the two direction `->` and `<-`, where the `->` denotes a message (arbitrary and/or DH public key) from the initiator to the responder, while `<-` the opposite.\n\nHence a _message pattern_ consisting of a direction and one or multiple tokens such as `<- e, s, es`  has to be interpreted one token at a time: in this example, the responder is sending his ephemeral and static key to the initiator and is then executing a DH operation over the initiator's ephemeral key `e` (shared in a previously exchanged message pattern) and his static key `s`. On the other hand, such message indicates also that the initiator received the responder's ephemeral and static keys `e` and `s`, respectively, and performed a DH operation over his ephemeral key and the responder's just received static key `s`. In this way, both parties will be able to derive at the end of each message pattern processed the same shared secret, which is eventually used to update any derived symmetric encryption keys computed so far.\n\nIn some cases, DH public keys employed in a handshake are pre-shared before the handshake itself starts. In order to chronologically separate exchanged keys and DH operations performed before and during a handshake, Noise employs the `...` delimiter. \n\nFor example, the following message patterns\n```\n<- e\n...\n-> e, ee\n```\nindicates that the initiator knew the responder's ephemeral key before he sends his own ephemeral key and executes a DH operation between both parties ephemeral keys (similarly, the responder receives the initiator's ephemeral key and does a `ee` DH operation).\n\n\nAt this point it should be clear how such notation is able to compactly represent a large variety of DH based key-agreements. Nevertheless, we can easily define additional tokens and processing rules in order to address specific applications and security requirements, such as the [`psk`](http://www.noiseprotocol.org/noise.html#handshake-tokens) token used to process arbitrary pre-shared key material. \n\nAs an example of Noise flexibility, the custom protocol we detailed [above](#Ephemeral-and-Static-Public-Keys) can be shortly represented as _(Alice is on the left)_:\n```\n-> e\n<- e, ee, s\n-> s, ss\n```\nwhere after each DH operation an encryption key is derived (along with the secrets computed by all previously executed DH operations) in order to encrypt/decrypt any subsequent sent/received message.\n\nAnother example is given by the possibility to replicate within Noise the well established Signal's [X3DH](https://signal.org/docs/specifications/x3dh/) key-agreement protocols, thus making the latter a general framework to design and study security of many practical and widespread DH-based key-exchange protocols.\n\n## The Noise State Objects\n\nWe mentioned multiple times that parties derive an encryption key each time they perform a DH operation, but how does this work in more details?\n\nNoise defines three _state object_: a _Handshake State_, a _Symmetric State_ and a _Cipher State_, each encapsulated into each other and instantiated during the execution of a handshake.\n\nThe Handshake State object stores the user's and other party's received ephemeral and static keys (if any) and embeds a Symmetric State object.\n\nThe Symmetric State, instead, stores a handshake hash value `h`, iteratively updated with any message read/received and DH secret computed, and a chaining key `ck`, updated using a key derivation function every time a DH secret is computed. This object further embeds a Cipher State.\n\nLastly, the Cipher State stores a symmetric encryption `k` key and a counter `n`  used to encrypt and decrypt messages exchanged during the handshake (not only static keys, but also arbitrary payloads). These key and counter are refreshed every time the chaining key is updated.\n\nWhile processing each handshake's message pattern token, all these objects are updated according to some specific _processing rules_ which employ a combination of public-key primitives, hash and key-derivation functions and symmetric ciphers. It is important to note, however, that at the end of each processed message pattern, the two users will share the same Symmetric and Cipher State embedded in their respective Handshake States.\n\nOnce a handshake is complete, users derive two new Cipher States and can then discard the Handshake State object (and, thus, the embedded Symmetric State and Cipher State objects) \nemployed during the handshake. \n\nThese two Cipher states are used to encrypt and decrypt all outbound and inbound after-handshake messages, respectively, and only to these will be granted the confidentiality, authenticity, integrity and identity-hiding properties we detailed above.\n\nFor more details on processing rules, we refer to [Noise specifications](http://www.noiseprotocol.org/noise.html).\n\n\n# Supported Noise Handshakes in Waku\n\n\nThe Noise handshakes we provided support to in Waku address four typical scenarios occurring when an encrypted communication channel between Alice and Bob is going to be created: \n\n- Alice and Bob know each others' static key.\n- Alice knows Bob's static key;\n- Alice and Bob share no key material and they don't know each others' static key.\n- Alice and Bob share some key material, but they don't know each others' static key.\n\nThe possibility to have handshakes based on the reciprocal knowledge parties have of each other, allows designing Noise handshakes that can quickly reach the desired level of security on exchanged encrypted messages while keeping the number of interactions between Alice and Bob minimum.\n\nNonetheless, due to the pure _token-based_ nature of handshake processing rules, implementations can easily add support to any custom handshake pattern with minor modifications, in case more specific application use-cases need to be addressed.\n\nOn a side note, we already mentioned that identity-hiding properties can be guaranteed against a passive attacker that only reads the communication occurring between Alice and Bob. However, an active attacker who compromised one party's static key and actively interferes with the parties' exchanged messages, may lower the identity-hiding security guarantees provided by some handshake patterns. In our security model we exclude such adversary, but, for completeness, in the following we report a summary of possible de-anonymization attacks that can be performed by such an active attacker.\n\n\nFor more details on supported handshakes and on how these are implemented in Waku, we refer to [35/WAKU2-NOISE](https://rfc.vac.dev/spec/35/) RFC.\n\n\n\n### The K1K1 Handshake\n\nIf Alice and Bob know each others' static key (e.g., these are public or were already exchanged in a previous handshake) , they MAY execute a `K1K1` handshake.  In Noise notation *(Alice is on the left)* this can be sketched as:\n```\n K1K1:\n    ->  s\n    <-  s\n       ...\n    ->  e\n    <-  e, ee, es\n    ->  se\n```\nWe note that here only ephemeral keys are exchanged. This handshake is useful in case Alice needs to instantiate a new separate encrypted communication channel with Bob, e.g. opening multiple parallel connections, file transfers, etc.\n\n**Security considerations on identity-hiding (active attacker)**: no static key is transmitted, but an active attacker impersonating Alice can check candidates for Bob's static key.\n\n### The XK1 Handshake\n\nHere, Alice knows how to initiate a communication with Bob and she knows his public static key: such discovery can be achieved, for example, through a publicly accessible register of users' static keys, smart contracts, or through a previous public/private advertisement of Bob's static key.\n\nA Noise handshake pattern that suits this scenario is `XK1`:\n```\n XK1:\n    <-  s\n       ...\n    ->  e\n    <-  e, ee, es\n    ->  s, se\n```\nWithin this handshake, Alice and Bob reciprocally authenticate their static keys `s` using ephemeral keys `e`. We note that while Bob's static key is assumed to be known to Alice (and hence is not transmitted), Alice's static key is sent to Bob encrypted with a key derived from both parties ephemeral keys and Bob's static key.\n\n**Security considerations on identity-hiding (active attacker)**: Alice's static key is encrypted with forward secrecy to an authenticated party. An active attacker initiating the handshake can check candidates for Bob's static key against recorded/accepted exchanged handshake messages.\n\n\n### The XX and XXpsk0 Handshakes\n\nIf Alice is not aware of any static key belonging to Bob (and neither Bob knows anything about Alice), she can execute an `XX` handshake, where each party tran**X**mits to the other its own static key. \n\nThe handshake goes as follows:\n```\n XX:\n    ->  e\n    <-  e, ee, s, es\n    ->  s, se\n```\nWe note that the main difference with `XK1` is that in second step Bob sends to Alice his own static key encrypted with a key obtained from an ephemeral-ephemeral Diffie-Hellman exchange.\n\n\nThis handshake can be slightly changed in case both Alice and Bob pre-shares some secret `psk` which can be used to strengthen their mutual authentication during the handshake execution. One of the resulting protocol, called `XXpsk0`, goes as follow:\n\n```\n XXpsk0:\n    ->  psk, e\n    <-  e, ee, s, es\n    ->  s, se\n```\nThe main difference with `XX` is that Alice's and Bob's static keys, when transmitted, would be encrypted with a key derived from `psk` as well.\n\n\n**Security considerations on identity-hiding (active attacker)**: Alice's static key is encrypted with forward secrecy to an authenticated party for both `XX` and `XXpsk0` handshakes. In `XX`, Bob's static key is encrypted with forward secrecy but is transmitted to a non-authenticated user which can then be an active attacker. In `XXpsk0`, instead, Bob's secret key is protected by forward secrecy to a partially authenticated party (through the pre-shared secret `psk` but not through any static key), provided that `psk` was not previously compromised (in such case identity-hiding properties provided by the `XX` handshake applies).\n\n# Session Management and Multi-Device Support\n\nWhen two users complete a Noise handshake, an encryption/decryption session - or _Noise session_ - consisting of two Cipher States is instantiated.\n\nBy identifying Noise session with a `session-id` derived from the handshake's cryptographic material, we can take advantage of the [PubSub/GossipSub](https://github.com/libp2p/specs/tree/master/pubsub) protocols used by Waku for relaying messages in order to manage instantiated Noise sessions.\n\nThe core idea is to exchange after-handshake messages  (encrypted with a Cipher State specific to the Noise session), over a content topic derived from the (secret) `session-id` the corresponding session refers to.\n\nThis allows to decouple the handshaking phase from the actual encrypted communication, thus improving users' identity-hiding capabilities. \n\nFurthermore, by publicly revealing a value derived from `session-id` on the corresponding session content topic, a Noise session can be marked as _stale_, enabling peers to save resources by discarding any eventually [stored](https://rfc.vac.dev/spec/13/) message sent to such content topic.\n\nOne relevant aspect in today's applications is the possibility for users to employ different devices in their communications. In some cases, this is non-trivial to achieve since, for example, encrypted messages might be required to be synced on different devices which do not necessarily share the necessary key material for  decryption and may be temporarily offline.\n\nWe address this by requiring each user's device to instantiate multiple Noise sessions either with all user's other devices which, in turn, all together share a Noise session with the other party, or by directly instantiating a Noise session with all other party's devices. \n\nWe named these two approaches $N11M$ and $NM$, respectively, which are in turn loosely based on the paper [“Multi-Device for Signal”](https://eprint.iacr.org/2019/1363.pdf) and [Signal’s Sesame Algorithm](https://signal.org/docs/specifications/sesame/).\n\n\n![](//img/noise/N11M.png)\n\n\nInformally, in the $N11M$ session management scheme, once the first Noise session between any of Alice’s and Bob’s device is instantiated, its session information is securely propagated to all other devices using previously instantiated Noise sessions. Hence, all devices are able to send and receive new messages on the content topic associated to such session. \n\n![](//img/noise/NM.png)\n\nIn the $NM$ session management scheme, instead, all pairs of Alice's and Bob's devices have a distinct Noise session: a message is then sent from the currently-in-use sender’s device to all recipient’s devices, by properly encrypting and sending it to the content topics of each corresponding Noise session. If sent messages should be available on all sender’s devices as well, we require each pair of sender’s devices to instantiate a Noise session used for syncing purposes.\n\nFor more technical details on how Noise sessions are instantiated and managed within these two mechanisms and the different trade-offs provided by the latter, we refer to [37/WAKU2-NOISE-SESSIONS](https://rfc.vac.dev/spec/37/).\n\n# Conclusions\n\nIn this post we provided an overview of Noise, a protocol framework for designing Diffie-Hellman based key-exchange mechanisms allowing systematic security and threat model analysis.\n\nThe flexibility provided by Noise components allows not only to fully replicate with same security guarantees well established key-exchange primitives such as X3DH, currently employed by Status [5/TRANSPORT-SECURITY](https://specs.status.im/spec/5), but enables also optimizations based on the reciprocal knowledge parties have of each other while allowing easier protocols' security analysis and (formal) verification.\n\nFurthermore, different handshakes can be combined and executed one after each other, a particularly useful feature to authenticate multiple static keys employed by different applications but also to ease keys revocation.\n\nThe possibility to manage Noise sessions over multiple devices and the fact that handshakes can be concretely instantiated using modern, fast and secure cryptographic primitives such as [ChaChaPoly](https://datatracker.ietf.org/doc/html/rfc7539) and [BLAKE2b](https://datatracker.ietf.org/doc/html/rfc7693), make Noise one of the best candidates for efficiently and securely address the many different needs of applications built on top of Waku requiring key-agreement.\n\n## Future steps\n\nThe available [implementation](https://github.com/status-im/nwaku/tree/master/waku/v2/protocol/waku_noise) of Noise in `nwaku`, although mostly complete, is still in its testing phase. As future steps we would like to:\n- have an extensively tested and robust Noise implementation;\n- formalize, implement and test performances of the two proposed $N11M$ and $NM$ session management mechanisms and their suitability for common use-case scenarios;\n- provide Waku network nodes a native protocol to readily support key-exchanges, strongly-encrypted communication and multi-device session management mechanisms with none-to-little interaction besides applications' connection requests.\n \n# References\n\n- [6/WAKU1](https://rfc.vac.dev/spec/6/)\n- [10/WAKU2](https://rfc.vac.dev/spec/10/) \n- [13/WAKU2-STORE](https://rfc.vac.dev/spec/13/)\n- [26/WAKU-PAYLOAD](https://rfc.vac.dev/spec/26/)\n- [35/WAKU2-NOISE](https://rfc.vac.dev/spec/35/)\n- [37/WAKU2-NOISE-SESSIONS](https://rfc.vac.dev/spec/37/)\n- [5/TRANSPORT-SECURITY](https://specs.status.im/spec/5)\n- [The PubSub/GossipSub Protocols](https://github.com/libp2p/specs/tree/master/pubsub)\n- [The Noise Protocol Framework](http://www.noiseprotocol.org/noise.html)\n- [The X3DH Key-agreement Protocol](https://signal.org/docs/specifications/x3dh/)\n- [“Multi-Device for Signal”](https://eprint.iacr.org/2019/1363.pdf)\n- [Signal’s Sesame Algorithm](https://signal.org/docs/specifications/sesame/).\n- [Public-key cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography)\n- [Elliptic curves](https://en.wikipedia.org/wiki/Elliptic_curve)\n- [Elliptic Curve point multiplication](https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication)\n- [Symmetric key algorithm](https://en.wikipedia.org/wiki/Symmetric-key_algorithm)\n- [Authenticated encryption](https://en.wikipedia.org/wiki/Authenticated_encryption)\n- [Diffie-Hellman Key-Exchange](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)\n- [The Discrete Logarithm Problem](https://en.wikipedia.org/wiki/Discrete_logarithm)\n- [Computational Diffie-Hellman Assumption](https://en.wikipedia.org/wiki/Computational_Diffie%E2%80%93Hellman_assumption)\n- [The ECIES Encryption Algorithm](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n- [The ECDSA Signature Algorithm](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) \n- [The Galois Counter Mode mode of operation](https://en.wikipedia.org/wiki/Galois/Counter_Mode) \n- [The ChaChaPoly AEAD Cipher](https://datatracker.ietf.org/doc/html/rfc7539)\n- [The BLAKE2b Hash Function](https://datatracker.ietf.org/doc/html/rfc7693)\n- [The SHA-3 Hash Function](https://en.wikipedia.org/wiki/SHA-3)","metadata":{"layout":"post","name":"Noise handshakes as key-exchange mechanism for Waku","title":"Noise handshakes as key-exchange mechanism for Waku","date":"2022-05-17T10:00:00.000Z","author":"s1fr0","published":true,"permalink":"/wakuv2-noise","categories":"research","summary":"We provide an overview of the Noise Protocol Framework as a tool to design efficient and secure key-exchange mechanisms in Waku2.","image":"/img/noise/NM.png","discuss":"https://forum.vac.dev/t/discussion-noise-handshakes-as-key-exchange-mechanism-for-waku/137","_includes":["math"]},"toc":[{"content":"Introduction","slug":"introduction","lvl":1,"i":0,"seen":0},{"content":"The Diffie-Hellman Key-exchange","slug":"the-diffie-hellman-key-exchange","lvl":2,"i":1,"seen":0},{"content":"Ephemeral and Static Public Keys","slug":"ephemeral-and-static-public-keys","lvl":2,"i":2,"seen":0},{"content":"The Noise Protocol Framework","slug":"the-noise-protocol-framework","lvl":1,"i":3,"seen":0},{"content":"Message patterns","slug":"message-patterns","lvl":2,"i":4,"seen":0},{"content":"The Noise State Objects","slug":"the-noise-state-objects","lvl":2,"i":5,"seen":0},{"content":"Supported Noise Handshakes in Waku","slug":"supported-noise-handshakes-in-waku","lvl":1,"i":6,"seen":0},{"content":"The K1K1 Handshake","slug":"the-k1k1-handshake","lvl":3,"i":7,"seen":0},{"content":"The XK1 Handshake","slug":"the-xk1-handshake","lvl":3,"i":8,"seen":0},{"content":"The XX and XXpsk0 Handshakes","slug":"the-xx-and-x-xpsk0-handshakes","lvl":3,"i":9,"seen":0},{"content":"Session Management and Multi-Device Support","slug":"session-management-and-multi-device-support","lvl":1,"i":10,"seen":0},{"content":"Conclusions","slug":"conclusions","lvl":1,"i":11,"seen":0},{"content":"Future steps","slug":"future-steps","lvl":2,"i":12,"seen":0},{"content":"References","slug":"references","lvl":1,"i":13,"seen":0}]},"navProps":{"metadata":{"published":true,"title":"Noise handshakes as key-exchange mechanism for Waku","layout":"post","name":"Noise handshakes as key-exchange mechanism for Waku","date":"2022-05-17T10:00:00.000Z","author":"s1fr0","permalink":"/wakuv2-noise","categories":"research","summary":"We provide an overview of the Noise Protocol Framework as a tool to design efficient and secure key-exchange mechanisms in Waku2.","image":"img/noise/NM.png","discuss":"https://forum.vac.dev/t/discussion-noise-handshakes-as-key-exchange-mechanism-for-waku/137","_includes":["math"]},"navOrder":1652781600,"localPath":"research/2022-05-17-noise.md","path":["wakuv2-noise"],"children":[],"isDir":false},"routeParams":{"path":["wakuv2-noise"]}},"__N_SSG":true}