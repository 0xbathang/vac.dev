{"pageProps":{"markdown":{"content":"\n*This write-up is based on a talk given at DevCon 6 in Bogota, a video can be found [here](https://www.youtube.com/watch?v=CW1DYJifdhs)*\n\n### Intro\n\nIn this write-up, we are going to talk about building privacy-protecting\ninfrastructure.  What is it, why do we need it and how can we build it?\n\nWe'll look at Waku, the communication layer for Web3. We'll look at how we are\nusing Zero Knowledge (ZK) technology to incentivize and protect the Waku\nnetwork. We'll also look at Zerokit, a library we are writing to make ZKP easier\nto use in different environments.\n\nAt the end of this write-up, I hope you'll come away with an understanding of\nthe importance of privacy-protecting infrastructure and how we can build it.\n\n### About\n\nFirst, briefly about Vac. We build public good protocols for the decentralized\nweb, with a focus on privacy and communication. We do applied research based on\nwhich we build protocols, libraries and publications. We are also the custodians\nof protocols that reflect a set of principles.\n\n![Principles](/img/building_private_infra_principles.png)\n\nIt has its origins in the [Status app](https://status.im/) and trying to improve\nthe underlying protocols and infrastructure. We build [Waku](https://waku.org/),\namong other things.\n\n### Why build privacy-protecting infrastructure?\n\nPrivacy is the power to selectively reveal yourself. It is a requirement for\nfreedom and self-determination.\n\nJust like you need decentralization in order to get censorship-resistance, you\nneed privacy to enable freedom of expression.\n\nTo build applications that are decentralized and privacy-protecting, you need\nthe base layer, the infrastructure itself, to have those properties.\n\nWe see this a lot. It is easier to make trade-offs at the application layer than\ndoing them at the base layer. You can build custodial solutions on top of a\ndecentralized and non-custodial network where participants control their own\nkeys, but you can't do the opposite.\n\nIf you think about it, buildings can be seen as a form of privacy-protecting\ninfrastructure. It is completely normal and obvious in many ways, but when it\ncomes to the digital realm our mental models and way of speaking about it hasn't\ncaught up yet for most people.\n\nI'm not going too much more into the need for privacy or what happens when you\ndon't have it, but suffice to say it is an important property for any open\nsociety.\n\nWhen we have conversations, true peer-to-peer offline conversations, we can talk\nprivately. If we use cash to buy things we can do commerce privately.\n\nOn the Internet, great as it is, there are a lot of forces that makes this\nnatural state of things not the default. Big Tech has turned users into a\ncommodity, a product, and monetized user's attention for advertising. To\noptimize for your attention they need to surveil your habits and activities, and\nhence breach your privacy. As opposed to more old-fashioned models, where\nsomeone is buying a useful service from a company and the incentives are more\naligned.\n\nWe need to build credibly neutral infrastructure that protects your privacy at\nthe base layer, in order to truly enable applications that are\ncensorship-resistant and encourage meaningful freedom of expression.\n\n### Web3 infrastructure\n\nInfrastructure is what lies underneath. Many ways of looking at this but I'll\nkeep it simple as per the original Web3 vision. You had Ethereum for\ncompute/consensus, Swarm for storage, and Whisper for messaging. Waku has taken\nover the mantle from Whisper and is a lot more\n[usable](https://vac.dev/fixing-whisper-with-waku) today than Whisper ever was,\nfor many reasons.\n\n![Web3 Infrastructure](/img/web3_holy_trinity.png)\n\nOn the privacy-front, we see how Ethereum is struggling. It is a big UX problem,\nespecially when you try to add privacy back \"on top\". It takes a lot of effort\nand it is easier to censor. We see this with recent action around Tornado Cash.\nCompare this with something like Zcash or Monero, where privacy is there by\ndefault.\n\nThere are also problems when it comes to the p2p networking side of things, for\nexample with Ethereum validator privacy and hostile actors and jurisdictions. If\nsomeone can easily find out where a certain validator is physically located,\nthat's a problem in many parts of the world. Being able to have stronger\nprivacy-protection guarantees would be very useful for high-value targets.\n\nThis doesn't begin to touch on the so called \"dapps\" that make a lot of\nsacrifices in how they function, from the way domains work, to how websites are\nhosted and the reliance on centralized services for communication. We see this\ntime and time again, where centralized, single points of failure systems work\nfor a while, but then eventually fail.\n\nIn many cases an individual user might not care enough though, and for platforms\nthe lure to take shortcuts is strong. That is why it is important to be\nprincipled, but also pragmatic in terms of the trade-offs that you allow on top.\nWe'll touch more on this in the design goals around modularity that Waku has.\n\n### ZK for privacy-protecting infrastructure\n\nZKPs are a wonderful new tool. Just like smart contracts enables programmable\nmoney, ZKPs allow us to express fundamentally new things. In line with the great\ntradition of trust-minimization, we can prove statement while revealing the\nabsolute minimum information necessary. This fits the definition of privacy, the\npower to selectively reveal yourself, perfectly. I'm sure I don't need to tell\nanyone reading this but this is truly revolutionary. The technology is advancing\nextremely fast and often it is our imagination that is the limit.\n\n![Zero knowledge](/img/building_private_infra_zk.png)\n\n### Waku\n\nWhat is Waku? It is a set of modular protocols for p2p communication. It has a\nfocus on privacy, security and being able to run anywhere. It is the spiritual\nsuccess to Whisper.\n\nBy modular we mean that you can pick and choose protocols and how you use them\ndepending on constraints and trade-offs. For example, bandwidth usage vs\nprivacy.\n\nIt is designed to work in resource restricted environments, such as mobile\nphones and in web browsers. It is important that infrastructure meets users\nwhere they are and supports their real-world use cases. Just like you don't need\nyour own army and a castle to have your own private bathroom, you shouldn't need\nto have a powerful always-on node to get reasonable privacy and\ncensorship-resistance. We might call this self-sovereignty.\n\n### Waku - adaptive nodes\n\nOne way of looking at Waku is as an open service network. There are nodes with\nvarying degrees of capabilities and requirements. For example when it comes to\nbandwidth usage, storage, uptime, privacy requirements, latency requirements,\nand connectivity restrictions.\n\nWe have a concept of adaptive nodes that can run a variety of protocols. A node\noperator can choose which protocols they want to run. Naturally, there'll be\nsome nodes that do more consumption and other nodes that do more provisioning.\nThis gives rise to the idea of a service network, where services are provided\nfor and consumed.\n\n![Adaptive Nodes](/img/building_private_infra_adaptive.png)\n\n### Waku - protocol interactions \n\nThere are many protocols that interact. Waku Relay protocol is based on libp2p\nGossipSub for p2p messaging. We have filter for bandwidth-restricted nodes to\nonly receive subset of messages. Lightpush for nodes with short connection\nwindows to push messages into network. Store for nodes that want to retrieve\nhistorical messages.\n\nOn the payload layer, we provide support for Noise handshakes/key-exchanges.\nThis means that as a developers, you can get end-to-end encryption and expected\nguarantees out of the box. We have support for setting up a secure channel from\nscratch, and all of this paves the way for providing Signal's Double Ratchet at\nthe protocol level much easier. We also have experimental support for\nmulti-device usage. Similar features have existed in for example the Status app\nfor a while, but with this we make it easier for any platform using Waku to use\nit.\n\nThere are other protocols too, related to peer discovery, topic usage, etc. See\n[specs](https://rfc.vac.dev/) for more details.\n\n![Protocol Interactions](/img/building_private_infra_interactions.png)\n\n### Waku - Network\n\nFor the Waku network, there are a few problems. For example, when it comes to\nnetwork spam and incentivizing service nodes. We want to address these while\nkeeping privacy-guarantees of the base layer. I'm going to go into both of\nthese.\n\nThe spam problem arises on the gossip layer when anyone can overwhelm the\nnetwork with messages. The service incentivization is a problem when nodes don't\ndirectly benefit from the provisioning of a certain service. This can happen if\nthey are not using the protocol directly themselves as part of normal operation,\nor if they aren't socially inclined to provide a certain service. This depends a\nlot on how an individual platform decides to use the network.\n\n![Waku Network](/img/building_private_infra_network.png)\n\n### Dealing with network spam and RLN Relay\n\nSince the p2p relay network is open to anyone, there is a problem with spam. If\nwe look at existing solutions for dealing with spam in traditional messaging\nsystems, a lot of entities like Google, Facebook, Twitter, Telegram, Discord use\nphone number verification. While this is largely sybil-resistant, it is\ncentralized and not private at all.\n\nHistorically, Whisper used PoW which isn't good for heterogenerous networks.\nPeer scoring is open to sybil attacks and doesn't directly address spam\nprotection in an anonymous p2p network.\n\nThe key idea here is to use RLN for private economic spam protection using\nzkSNARKs.\n\nI'm not going to go into too much detail of RLN here. If you are interested, I\ngave a [talk](https://www.youtube.com/watch?v=g41nHQ0mLoA) in Amsterdam at\nDevconnect about this. We have some write-ups on RLN\n[here](https://vac.dev/rln-relay) by Sanaz who has been pushing a lot of this\nfrom our side. There's also another talk at Devcon by Tyler going into RLN in\nmore detail. Finally, here's the [RLN spec](https://rfc.vac.dev/spec/32/).\n\nI'll briefly go over what it is, the interface and circuit and then talk about\nhow it is used in Waku.\n\n### RLN - Overview and Flow\n\nRLN stands for Rate Limiting Nullifier. It is an anonyomous rate limiting\nmechanism based on zkSNARKs. By rate limiting we mean you can only send N\nmessages in a given period. By anonymity we mean that you can't link message to\na publisher. We can think of it as a voting booth, where you are only allowed to\nvote once every election.\n\n![Voting Booth](/img/building_private_infra_vote.png)\n\nIt can be used for spam protection in p2p messaging systems, and also rate\nlimiting in general, such as for a decentralized captcha.\n\nThere are three parts to it. You register somewhere, then you can signal and\nfinally there's a verification/slashing phase. You put some capital at risk,\neither economic or social, and if you double signal you get slashed.\n\n### RLN - Circuit\n\nHere's what the private and public inputs to the circuit look like. The identity\nsecret is generated locally, and we create an identity commitment that is\ninserted into a Merkle tree. We then use Merkle proofs to prove membership.\nRegistered member can only signal once for a given epoch or external nullifier,\nfor example every ten seconds in Unix time. RLN identifer is for a specific RLN\napp.\n\nWe also see what the circuit output looks like. This is calculated locally. `y`\nis a share of the secret equation, and the (internal) nullifier acts as a unique\nfingerprint for a given app/user/epoch combination. How do we calculate `y` and\nthe internal nullifier?\n\n```\n// Private input\nsignal input identity_secret;\nsignal input path_elements[n_levels][1];\nsignal input identity_path_index[n_levels];\n\n// Public input\nsignal input x; // signal_hash\nsignal input epoch; // external_nullifier\nsignal input rln_identifier;\n\n// Circuit output\nsignal output y;\nsignal output root;\nsignal output nullifier;\n```\n\n### RLN - Shamir's secret sharing\n\nThis is done using [Shamir's secret\nsharing](https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing). Shamir’s\nsecret sharing is based on idea of splitting a secret into shares. This is how\nwe enable slashing of funds.\n\nIn this case, we have two shares. If a given identity `a0` signals twice in\nepoch/external nullifier, `a1` is the same. For a given RLN app,\n`internal_nullifier` then stays the same. `x` is signal hash which is different,\nand `y` is public, so we can reconstruct `identity_secret`. With the identity\nsecret revealed, this gives access to e.g. financial stake.\n\n```\na_0 = identity_secret // secret S\na_1 = poseidonHash([a0, external_nullifier])\n\ny = a_0 + x * a_1\n\ninternal_nullifier = poseidonHash([a_1, rln_identifier])\n```\n\n![Shamir's secret sharing](/img/building_private_infra_shamir.png)\n\n### RLN Relay\n\nThis is how RLN is used with Relay/GossipSub protocol. A node registers and\nlocks up funds, and after that it can send messages. It publishes a message\ncontaining the Zero Knowledge proof and some other details.\n\nEach relayer node listens to the membership contract for new members, and it\nalso keeps track of relevant metadata and merkle tree. Metadata is needed to be\nable to detect double signaling and perform slashing.\n\nBefore forwarding a message, it does some verification checks to ensure there\nare no duplicate messages, ZKP is valid and no double signaling has occured.  It\nis worth noting that this can be combined with peer scoring, for example for\nduplicate messages or invalid ZK proofs.\n\nIn line of Waku's goals of modularity, RLN Relay is applied on a specific subset\nof pubsub and content topics. You can think of it as an extra secure channel.\n\n![RLN Relay](/img/building_private_infra_rlnrelay.png)\n\n### RLN Relay cross-client testnet\n\nWhere are we with RLN Relay deployment? We've recently launched our second\ntestnet. This is using RLN Relay with a smart contract on Goerli. It integrates\nwith our example p2p chat application, and it does so through three different\nclients, nwaku, go-waku and js-waku for browsers. This is our first p2p\ncross-client testnet for RLN Relay.\n\nHere's a [video](https://www.youtube.com/watch?v=-vVrJWW0fls) that shows a user\nregistering in a browser, signaling through JS-Waku. It then gets relayed to a\nnwaku node, that verifies the proof. The second\n[video](https://www.youtube.com/watch?v=Xz5q2ZhkFYs) shows what happens in the\nspam case. when more than one message is sent in a given epoch, it detects it as\nspam and discards it. Slashing hasn't been implemented fully yet in the client\nand is a work in progress.\n\nIf you are curious and want to participate, you can join the effort on our [Vac\nDiscord](https://discord.gg/PQFdubGt6d). We also have\n[tutorials](https://github.com/status-im/nwaku/blob/master/docs/tutorial/rln-chat-cross-client.md)\nsetup for all clients so you can play around with it.\n\nAs part of this, and to make it work in multiple different environments, we've\nalso been developing a new library called Zerokit. I'll talk about this a bit\nlater.\n\n### Private settlement / Service credentials\n\nGoing back to the service network idea, let's talk about service credentials.\nThe idea behind service credentials and private settlement is to enable two\nactors to pay for and provide services without compromising their privacy. We do\nnot want the payment to create a direct public link between the service provider\nand requester.\n\nRecall the Waku service network illustration with adaptive nodes that choose\nwhich protocols they want to run. Many of these protocols aren't very heavy and\njust work by default. For example the relay protocol is enabled by default.\nOther protocols are much heavier to provide, such as storing historical\nmessages.\n\nIt is desirable to have additional incentives for this, especially for platforms\nthat aren't community-based where some level of altruism can be assumed (e.g.\nStatus Communities, or WalletConnect cloud infrastructure).\n\nYou have a node Alice that is often offline and wants to consume historical\nmessages on some specific content topics. You have another node Bob that runs a\nserver at home where they store historical messages for the last several weeks.\nBob is happy to provide this service for free because he's excited about running\nprivacy-preserving infrastructure and he's using it himself, but his node is\ngetting overwhelmed by freeloaders and he feels like he should be paid something\nfor continuing to provide this service.\n\nAlice deposits some funds in a smart contract which registers it in a tree,\nsimilar to certain other private settlement mechanisms. A fee is taken or\nburned. In exchange, she gets a set of tokens or service credentials. When she\nwants to do a query with some criteria, she sends this to Bob. Bob responds with\nsize of response, cost, and receiver address. Alice then sends a proof of\ndelegation of a service token as a payment. Bob verifies the proof and resolves\nthe query.\n\nThe end result is that Alice has consumed some service from Bob, and Bob has\nreceived payment for this. There's no direct transaction link between Alice and\nBob, and gas fees can be minimized by extending the period before settling on\nchain.\n\nThis can be complemented with altruistic service provisioning, for example by\nsplitting the peer pool into two slots, or only providing a few cheap queries\nfor free.\n\nThe service provisioning is general, and can be generalized for any kind of\nrequest/response service provisoning that we want to keep private.\n\nThis isn't a perfect solution, but it is an incremental improvement on top of\nthe status quo. It can be augmented with more advanced techniques such as better\nnon-repudiable node reputation, proof of correct service provisioning, etc.\n\nWe are currently in the raw spec / proof of concept stage of this. We expect to\nlaunch a testnet of this later this year or early next year.\n\n![Service credentials flow](/img/building_private_infra_servicecred.png)\n\n### Zerokit\n\n[Zerokit](https://github.com/vacp2p/zerokit) is a set of Zero Knowledge modules,\nwritten in Rust and designed to be used in many different environments. The\ninitial goal is to get the best of both worlds with Circom/Solidity/JS and\nRust/ZK ecosystem. This enables people to leverage Circom-based constructs from\nnon-JS environments.\n\nFor the RLN module, it is using Circom circuits via ark-circom and Rust for\nscaffolding. It exposes a C FFI API that can be used through other system\nprogramming environments, like Nim and Go. It also exposes an experimental WASM\nAPI that can be used through web browsers.\n\nWaku is p2p infrastructure running in many different environments, such as\nNim/JS/Go/Rust, so this a requirement for us.\n\nCircom and JS strengths are access to Dapp developers, tooling, generating\nverification code, circuits etc.  Rust strengths is that it is systems-based and\neasy to interface with other language runtime such as Nim, Go, Rust, C. It also\ngives access to other Rust ZK ecosystems such as arkworks. This opens door for\nusing other constructs, such as Halo2. This becomes especially relevant for\nconstructs where you don't want to do a trusted setup or where circuits are more\ncomplex/custom and performance requirements are higher.\n\nIn general with Zerokit, we want to make it easy to build and use ZKP in a\nmultitude of environments, such as mobile phones and web browsers. Currently it\nis too complex to write privacy-protecting infrastructure with ZKPs considering\nall the languages and tools you have to learn, from JS, Solidity and Circom to\nRust, WASM and FFI. And that isn't even touching on things like secure key\nstorage or mobile dev. Luckily more and more projects are working on this,\nincluding writing DSLs etc. It'd also be exciting if we can make a useful\ntoolstack for JS-less ZK dev to reduce cognitive overhead, similar to what we\nhave with something like Foundry.\n\n### Other research\n\nI also want to mention a few other things we are doing. One thing is\n[protocol specifications](https://rfc.vac.dev/). We think this is very important\nfor p2p infra, and we see a lot of other projects that claim to do it p2p\ninfrastructure but they aren't clear about guarantees or how stable something\nis. That makes it hard to have multiple implementations, to collaborate across\ndifferent projects, and to analyze things objectively.\n\nRelated to that is publishing [papers](https://vac.dev/publications). We've put\nout three so far, related to Waku and RLN-Relay. This makes it easier to\ninterface with academia. There's a lot of good researchers out there and we want\nto build a better bridge between academia and industry.\n\nAnother thing is [network](https://vac.dev/wakuv2-relay-anon)\n[privacy](https://github.com/vacp2p/research/issues/107). Waku is modular with\nrespect to privacy guarantees, and there are a lot of knobs to turn here\ndepending on specific deployments. For example, if you are running the full\nrelay protocol you currently have much stronger receiver anonymity than if you\nare running filter protocol from a bandwidth or connectivity-restricted node.\n\nWe aim to make this pluggable depending on user needs. E.g. mixnets such as Nym\ncome with some trade-offs but are a useful tool in the arsenal. A good mental\nmodel to keep in mind is the anonymity trilemma, where you can only pick 2/3 out\nof low latency, low bandwidth usage and strong anonymity.\n\nWe are currently exploring [Dandelion-like\nadditions](https://github.com/vacp2p/research/issues/119) to the relay/gossip\nprotocol, which would provide for stronger sender anonymity, especially in a\nmulti-node/botnet attacker model. As part of this we are looking into different\nparameters choices and general possibilities for lower latency usage. This could\nmake it more amenable for latency sensitive environments, such as validator\nprivacy, for specific threat models. The general theme here is we want to be\nrigorous with the guarantees we provide, under what conditions and for what\nthreat models.\n\nAnother thing mentioned earlier is [Noise payload\nencryption](https://vac.dev/wakuv2-noise), and specifically things like allowing\nfor pairing different devices with e.g. QR codes. This makes it easier for\ndevelopers to provide secure messaging in many realistic scenarios in a\nmulti-device world.\n\n![Other research](/img/building_private_infra_misc.png)\n\n### Summary\n\nWe've gone over what privacy-protecting infrastructure is, why we want it and\nhow we can build it. We've seen how ZK is a fundamental building block for this.\nWe've looked at Waku, the communication layer for Web3, and how it uses Zero\nKnowledge proofs to stay private and function better. We've also looked at\nZerokit and how we can make it easier to do ZKP in different environments.\n\nFinally we also looked at some other research we've been doing. All of the\nthings mentioned in this article, and more, is available as\n[write-ups](https://vac.dev/research), [specs](https://rfc.vac.dev/), or\ndiscussions on our [forum](forum.vac.dev/) or [Github](github.com/vacp2p/).\n\nIf you find any of this exciting to work on, feel free to reach out on our\nDiscord.  We are also [hiring](https://jobs.status.im/), and we have started\nexpanding into other privacy infrastructure tech like private and provable\ncomputation with ZK-WASM.\n","metadata":{"layout":"post","name":"Building Privacy-Protecting Infrastructure","title":"Building Privacy-Protecting Infrastructure","date":"2022-11-04T12:00:00.000Z","author":"oskarth","published":true,"permalink":"/building-privacy-protecting-infrastructure","categories":"research","summary":"What is privacy-protecting infrastructure? Why do we need it and how we can build it? We'll look at Waku, the communication layer for Web3. We'll see how it uses ZKPs to incentivize and protect the Waku network. We'll also look at Zerokit, a library that makes it easier to use ZKPs in different environments. After reading this, I hope you'll better understand the importance of privacy-protecting infrastructure and how we can build it.","image":"/img/building_private_infra_intro.png","discuss":"https://forum.vac.dev/t/discussion-building-privacy-protecting-infrastructure/161"},"toc":[{"content":"Intro","slug":"intro","lvl":3,"i":0,"seen":0},{"content":"About","slug":"about","lvl":3,"i":1,"seen":0},{"content":"Why build privacy-protecting infrastructure?","slug":"why-build-privacy-protecting-infrastructure","lvl":3,"i":2,"seen":0},{"content":"Web3 infrastructure","slug":"web3-infrastructure","lvl":3,"i":3,"seen":0},{"content":"ZK for privacy-protecting infrastructure","slug":"zk-for-privacy-protecting-infrastructure","lvl":3,"i":4,"seen":0},{"content":"Waku","slug":"waku","lvl":3,"i":5,"seen":0},{"content":"Waku - adaptive nodes","slug":"waku-adaptive-nodes","lvl":3,"i":6,"seen":0},{"content":"Waku - protocol interactions","slug":"waku-protocol-interactions","lvl":3,"i":7,"seen":0},{"content":"Waku - Network","slug":"waku-network","lvl":3,"i":8,"seen":0},{"content":"Dealing with network spam and RLN Relay","slug":"dealing-with-network-spam-and-rln-relay","lvl":3,"i":9,"seen":0},{"content":"RLN - Overview and Flow","slug":"rln-overview-and-flow","lvl":3,"i":10,"seen":0},{"content":"RLN - Circuit","slug":"rln-circuit","lvl":3,"i":11,"seen":0},{"content":"RLN - Shamir's secret sharing","slug":"rln-shamir-s-secret-sharing","lvl":3,"i":12,"seen":0},{"content":"RLN Relay","slug":"rln-relay","lvl":3,"i":13,"seen":0},{"content":"RLN Relay cross-client testnet","slug":"rln-relay-cross-client-testnet","lvl":3,"i":14,"seen":0},{"content":"Private settlement / Service credentials","slug":"private-settlement-service-credentials","lvl":3,"i":15,"seen":0},{"content":"Zerokit","slug":"zerokit","lvl":3,"i":16,"seen":0},{"content":"Other research","slug":"other-research","lvl":3,"i":17,"seen":0},{"content":"Summary","slug":"summary","lvl":3,"i":18,"seen":0}]},"navProps":{"metadata":{"published":true,"title":"Building Privacy-Protecting Infrastructure","layout":"post","name":"Building Privacy-Protecting Infrastructure","date":"2022-11-04T12:00:00.000Z","author":"oskarth","permalink":"/building-privacy-protecting-infrastructure","categories":"research","summary":"What is privacy-protecting infrastructure? Why do we need it and how we can build it? We'll look at Waku, the communication layer for Web3. We'll see how it uses ZKPs to incentivize and protect the Waku network. We'll also look at Zerokit, a library that makes it easier to use ZKPs in different environments. After reading this, I hope you'll better understand the importance of privacy-protecting infrastructure and how we can build it.","image":"img/building_private_infra_intro.png","discuss":"https://forum.vac.dev/t/discussion-building-privacy-protecting-infrastructure/161"},"navOrder":1667563200,"localPath":"research/2022-11-04-building-privacy-protecting-infrastructure.md","path":["building-privacy-protecting-infrastructure"],"children":[],"isDir":false},"routeParams":{"path":["building-privacy-protecting-infrastructure"]}},"__N_SSG":true}